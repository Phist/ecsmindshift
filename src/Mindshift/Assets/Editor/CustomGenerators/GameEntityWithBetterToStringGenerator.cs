using DesperateDevs.CodeGeneration;

namespace Assets.Editor.CustomGenerators
{
  public class GameEntityWithBetterToStringGenerator : IPostProcessor
  {
    public string name => "Game entity better ToString()";
    public int priority => 2;
    public bool runInDryMode => true;

    public CodeGenFile[] PostProcess(CodeGenFile[] files)
    {
      foreach (CodeGenFile file in files)
      {
        if (!file.fileName.Contains("GameEntity.cs"))
          continue;

        file.fileContent = WithBetterToString;
      }

      return files;
    }

    private string WithBetterToString = "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by Entitas.CodeGeneration.Plugins.EntityGenerator.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Linq;\nusing System.Text;\nusing Assets.Code;\nusing Assets.Code.Components;\nusing Assets.Code.Services;\nusing DesperateDevs.Utils;\nusing Assets.Code.Extensions;\nusing Entitas;\n\npublic sealed partial class GameEntity : Entitas.Entity\n{\n  private string _oldBaseToStringCache;\n  private string _toStringCache;\n  private StringBuilder _toStringBuilder;\n\n  public override string ToString()\n  {\n    InvalidateCache();\n\n    if (_toStringCache == null)\n    {\n      if (_toStringBuilder == null)\n        _toStringBuilder = new StringBuilder();\n\n      _toStringBuilder.Length = 0;\n\n      IComponent[] components = GetComponents();\n\n      if (components.Length == 0) // do not set _toStringCache this time since components seem to be initialized later o_O\n        return \"No components\";\n\n      _toStringBuilder.Append($\"{EntityName(components)} (\");\n\n      int num = components.Length - 1;\n\n      for (int index = 0; index < components.Length; ++index)\n      {\n        IComponent component = components[index];\n        Type type = component.GetType();\n\n        _toStringBuilder.Append(type.GetMethod(nameof(ToString)).DeclaringType.ImplementsInterface<IComponent>()\n          ? component.ToString()\n          : type.Name.RemoveComponentSuffix());\n\n        if (index < num)\n          _toStringBuilder.Append(\", \");\n      }\n\n      _toStringBuilder.Append($\")(*{retainCount})\");\n      _toStringCache = _toStringBuilder.ToString();\n\n      _oldBaseToStringCache = base.ToString();\n    }\n\n    return _toStringCache;\n  }\n\n  private void InvalidateCache()\n  {\n    if (_oldBaseToStringCache != base.ToString())\n      _toStringCache = null;\n  }\n\n  private string EntityName(IComponent[] components)\n  {\n    try\n    {\n      if (components.Length == 1)\n        return components[0].GetType().Name;\n      \n      foreach (IComponent component in components)\n      {\n        if (component is IService)\n          return component.GetType().Name;\n        \n        switch (component.GetType().Name)\n        {\n          case nameof(Assets.Code.Components.Hero):\n            return Hero();\n          case nameof(Assets.Code.Components.SpriteRendererComponent):\n            return SpriteRenderer.gameObject.name;\n        }\n      }\n    }\n    catch (Exception exception)\n    {\n      Contexts.sharedInstance.game.Logger.LogMessage(exception.Message);\n    }\n    \n    return components[0].GetType().Name;\n  }\n\n  private string Hero() =>\n    new StringBuilder($\"Hero \")\n      .Do(s => s.Append($\"Grounded \"), when: isGrounded)\n      .Do(s => s.Append($\"{CurrentHp}/{MaxHp} \"), when: hasCurrentHp && hasMaxHp)\n      .ToString();\n\n  private bool AnyWith(string name, IComponent[] @in) => \n    @in.Any(x => x.GetType().Name == name);\n}\n";
  }
}
